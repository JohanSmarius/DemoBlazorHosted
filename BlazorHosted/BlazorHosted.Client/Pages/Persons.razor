@page "/persons"
@using BlazorHosted.Client.JavaScriptInterop
@using BlazorHosted.Client.Services
@using BlazorHosted.Shared
@using Microsoft.AspNetCore.Components


@inject IDomainService PersonService
@inject IJavaScriptInterop JavaScriptInterop

@inject HttpClient Http

@inject IUriHelper UrlHelper

<NavLink class="nav-link" href="/">To Home</NavLink>

<h1>@WelcomeMessage</h1>


@foreach (var person in AvailablePersons)
{
    @*<PersonDetail Person="person" ref="PersonComponent"></PersonDetail>*@
    <div class="container">
            <div class="row">
                <div class="card" style="width: 18rem;">
                    <img class="card-img-top" src="@person.Picture" alt="Card image cap">
                    <div class="card-body">
                        <h5 class="card-title">@person.Name</h5>
                        <p class="card-text">@($"{person.Email} {person.PhoneNumber}")</p>
                        @*<button class="btn btn-success" onclick="@(() => SelectUser(person))">Select</button>*@
                        
                        <button class="btn btn-success" onclick="@(() => OnSelectPerson(person))">To Detail Page</button>
                    </div>
                </div>
            </div>
        </div>
}


@if (CurrentUser != null)
{
    <div class="container">
        <div class="row">
            <label for="name">Name: </label>
            <input id="name" bind="@CurrentUser.Name" />
        </div>

    </div>
}


<button class="btn btn-primary" onclick="@LoadPersons">Load persons From server</button>
<button class="btn btn-primary" onclick="@DeleteLastPerson">Delete last persons</button>


@functions {

    string WelcomeMessage = "Welcome DotNED Saturday From Blazor!";

    User CurrentUser { get; set; }

    List<User> AvailablePersons = new List<User>();

    async Task LoadPersons()
    {
        await PersonService.LoadPersons();
        AvailablePersons = PersonService.AvailablePersons;
    }

    protected override async Task OnInitAsync()
    {
        AvailablePersons = await Http.GetJsonAsync<List<User>>("api/persons");
    }

    async Task DeleteLastPerson()
    {
        var confirmed = await JavaScriptInterop.Confirm("Are you sure?");
        Console.WriteLine(confirmed.ToString());
        if (confirmed)
        {
            await PersonService.DeleteLastPerson();
            AvailablePersons = PersonService.AvailablePersons;
        }
    }

    void OnSelectPerson(User person)
    {
        Console.WriteLine($"/personedit/{person.Id}");

        UrlHelper.NavigateTo($"/personedit/{person.Id}");
    }

}
